
/*!
 * Module dependencies.
 */

<<<<<<< HEAD
var MongooseCollection = require('../../collection'),
    Collection = require('mongodb').Collection,
    utils = require('../../utils');
=======
var MongooseCollection = require('../../collection')
  , Collection = require('mongodb').Collection
  , STATES = require('../../connectionstate')
  , utils = require('../../utils')
>>>>>>> origin/master

/**
 * A [node-mongodb-native](https://github.com/mongodb/node-mongodb-native) collection implementation.
 *
 * All methods methods from the [node-mongodb-native](https://github.com/mongodb/node-mongodb-native) driver are copied and wrapped in queue management.
 *
 * @inherits Collection
 * @api private
 */

<<<<<<< HEAD
function NativeCollection() {
=======
function NativeCollection () {
>>>>>>> origin/master
  this.collection = null;
  MongooseCollection.apply(this, arguments);
}

/*!
 * Inherit from abstract Collection.
 */

NativeCollection.prototype.__proto__ = MongooseCollection.prototype;

/**
 * Called when the connection opens.
 *
 * @api private
 */

<<<<<<< HEAD
NativeCollection.prototype.onOpen = function() {
=======
NativeCollection.prototype.onOpen = function () {
>>>>>>> origin/master
  var self = this;

  // always get a new collection in case the user changed host:port
  // of parent db instance when re-opening the connection.

  if (!self.opts.capped.size) {
    // non-capped
    return self.conn.db.collection(self.name, callback);
  }

  // capped
<<<<<<< HEAD
  return self.conn.db.collection(self.name, function(err, c) {
=======
  return self.conn.db.collection(self.name, function (err, c) {
>>>>>>> origin/master
    if (err) return callback(err);

    // discover if this collection exists and if it is capped
    self.conn.db.listCollections({ name: self.name }).toArray(function(err, docs) {
      if (err) {
        return callback(err);
      }
      var doc = docs[0];
      var exists = !!doc;

      if (exists) {
        if (doc.options && doc.options.capped) {
          callback(null, c);
        } else {
<<<<<<< HEAD
          var msg = 'A non-capped collection exists with the name: ' + self.name + '\n\n'
                  + ' To use this collection as a capped collection, please '
                  + 'first convert it.\n'
                  + ' http://www.mongodb.org/display/DOCS/Capped+Collections#CappedCollections-Convertingacollectiontocapped';
=======
          var msg = 'A non-capped collection exists with the name: '+ self.name +'\n\n'
                  + ' To use this collection as a capped collection, please '
                  + 'first convert it.\n'
                  + ' http://www.mongodb.org/display/DOCS/Capped+Collections#CappedCollections-Convertingacollectiontocapped'
>>>>>>> origin/master
          err = new Error(msg);
          callback(err);
        }
      } else {
        // create
        var opts = utils.clone(self.opts.capped);
        opts.capped = true;
        self.conn.db.createCollection(self.name, opts, callback);
      }
    });
  });

<<<<<<< HEAD
  function callback(err, collection) {
=======
  function callback (err, collection) {
>>>>>>> origin/master
    if (err) {
      // likely a strict mode error
      self.conn.emit('error', err);
    } else {
      self.collection = collection;
      MongooseCollection.prototype.onOpen.call(self);
    }
<<<<<<< HEAD
  }
=======
  };
>>>>>>> origin/master
};

/**
 * Called when the connection closes
 *
 * @api private
 */

<<<<<<< HEAD
NativeCollection.prototype.onClose = function() {
=======
NativeCollection.prototype.onClose = function () {
>>>>>>> origin/master
  MongooseCollection.prototype.onClose.call(this);
};

/*!
 * Copy the collection methods and make them subject to queues
 */

for (var i in Collection.prototype) {
  // Janky hack to work around gh-3005 until we can get rid of the mongoose
  // collection abstraction
  try {
    if (typeof Collection.prototype[i] !== 'function') {
      continue;
    }
<<<<<<< HEAD
  } catch (e) {
    continue;
  }

  (function(i) {
    NativeCollection.prototype[i] = function() {
=======
  } catch(e) {
    continue;
  }

  (function(i){
    NativeCollection.prototype[i] = function () {
>>>>>>> origin/master
      if (this.buffer) {
        this.addQueue(i, arguments);
        return;
      }

<<<<<<< HEAD
      var collection = this.collection,
          args = arguments,
          self = this,
          debug = self.conn.base.options.debug;
=======
      var collection = this.collection
        , args = arguments
        , self = this
        , debug = self.conn.base.options.debug;
>>>>>>> origin/master

      if (debug) {
        if ('function' === typeof debug) {
          debug.apply(debug
<<<<<<< HEAD
            , [self.name, i].concat(utils.args(args, 0, args.length - 1)));
        } else {
          this.$print(self.name, i, args);
=======
            , [self.name, i].concat(utils.args(args, 0, args.length-1)));
        } else {
          console.error('\x1B[0;36mMongoose:\x1B[0m %s.%s(%s) %s %s %s'
            , self.name
            , i
            , print(args[0])
            , print(args[1])
            , print(args[2])
            , print(args[3]))
>>>>>>> origin/master
        }
      }

      return collection[i].apply(collection, args);
    };
  })(i);
}

<<<<<<< HEAD
/**
 * Debug print helper
 *
 * @api public
 */

NativeCollection.prototype.$print = function(name, i, args) {
  console.error(
    '\x1B[0;36mMongoose:\x1B[0m %s.%s(%s) %s %s %s',
    name,
    i,
    this.$format(args[0]),
    this.$format(args[1]),
    this.$format(args[2]),
    this.$format(args[3]));
};

/**
 * Formatter for debug print args
 *
 * @api public
 */

NativeCollection.prototype.$format = function(arg) {
  var type = typeof arg;
  if ('function' === type || 'undefined' === type) return '';
  return format(arg);
};
=======
/*!
 * Debug print helper
 */

function print (arg) {
  var type = typeof arg;
  if ('function' === type || 'undefined' === type) return '';
  return format(arg);
}
>>>>>>> origin/master

/*!
 * Debug print helper
 */

<<<<<<< HEAD
function format(obj, sub) {
  var x = utils.clone(obj, { retainKeyOrder: 1 });
  var representation;
=======
function format (obj, sub) {
  var x = utils.clone(obj, { retainKeyOrder: 1 });
>>>>>>> origin/master
  if (x) {
    if ('Binary' === x.constructor.name) {
      x = '[object Buffer]';
    } else if ('ObjectID' === x.constructor.name) {
<<<<<<< HEAD
      representation = 'ObjectId("' + x.toHexString() + '")';
      x = { inspect: function() { return representation; } };
    } else if ('Date' === x.constructor.name) {
      representation = 'new Date("' + x.toUTCString() + '")';
=======
      var representation = 'ObjectId("' + x.toHexString() + '")';
      x = { inspect: function() { return representation; } };
    } else if ('Date' === x.constructor.name) {
      var representation = 'new Date("' + x.toUTCString() + '")';
>>>>>>> origin/master
      x = { inspect: function() { return representation; } };
    } else if ('Object' === x.constructor.name) {
      var keys = Object.keys(x);
      var numKeys = keys.length;
      var key;
      for (var i = 0; i < numKeys; ++i) {
        key = keys[i];
        if (x[key]) {
          if ('Binary' === x[key].constructor.name) {
            x[key] = '[object Buffer]';
          } else if ('Object' === x[key].constructor.name) {
            x[key] = format(x[key], true);
          } else if ('ObjectID' === x[key].constructor.name) {
<<<<<<< HEAD
            (function(x) {
              var representation = 'ObjectId("' + x[key].toHexString() + '")';
              x[key] = { inspect: function() { return representation; } };
            })(x);
          } else if ('Date' === x[key].constructor.name) {
            (function(x) {
              var representation = 'new Date("' + x[key].toUTCString() + '")';
              x[key] = { inspect: function() { return representation; } };
            })(x);
          } else if (Array.isArray(x[key])) {
            x[key] = x[key].map(function(o) {
              return format(o, true);
=======
            ;(function(x){
              var representation = 'ObjectId("' + x[key].toHexString() + '")';
              x[key] = { inspect: function() { return representation; } };
            })(x)
          } else if ('Date' === x[key].constructor.name) {
            ;(function(x){
              var representation = 'new Date("' + x[key].toUTCString() + '")';
              x[key] = { inspect: function() { return representation; } };
            })(x)
          } else if (Array.isArray(x[key])) {
            x[key] = x[key].map(function (o) {
              return format(o, true)
>>>>>>> origin/master
            });
          }
        }
      }
    }
    if (sub) return x;
  }

  return require('util')
    .inspect(x, false, 10, true)
    .replace(/\n/g, '')
<<<<<<< HEAD
    .replace(/\s{2,}/g, ' ');
=======
    .replace(/\s{2,}/g, ' ')
>>>>>>> origin/master
}

/**
 * Retreives information about this collections indexes.
 *
 * @param {Function} callback
 * @method getIndexes
 * @api public
 */

NativeCollection.prototype.getIndexes = NativeCollection.prototype.indexInformation;

/*!
 * Module exports.
 */

module.exports = NativeCollection;
